#ifndef PAD_H
#define PAD_H

#include "common.h"

enum digital_pad_switches
{
    PAD_SELECT = (1 << 0),
    PAD_L3 = (1 << 1),
    PAD_R3 = (1 << 2),
    PAD_START = (1 << 3),
    PAD_UP = (1 << 4),
    PAD_RIGHT = (1 << 5),
    PAD_DOWN = (1 << 6),
    PAD_LEFT = (1 << 7),
    PAD_L2 = (1 << 8),
    PAD_R2 = (1 << 9),
    PAD_L1 = (1 << 10),
    PAD_R1 = (1 << 11),
    PAD_TRIANGLE = (1 << 12),
    PAD_CIRCLE = (1 << 13),
    PAD_CROSS = (1 << 14),
    PAD_SQUARE = (1 << 15)
};

enum sio_state
{
    SIO_STATE_NONE = 0,
    SIO_STATE_READ_CONTROLLER,
    //SIO_STATE_READ_MEMCARD
};

enum input_device_type
{
    INPUT_DEVICE_DIGITAL_PAD,
    INPUT_DEVICE_ANALOG_PAD,
    //INPUT_DEVICE_MULTITAP
};

typedef union
{
    struct
    {
        u32 tx_fifo_not_full : 1;
        u32 rx_fifo_not_empty : 1;
        u32 tx_finished : 1;
        u32 rx_parity_error : 1;
        u32 : 3;
        u32 ack_is_low : 1;
        u32 : 1;
        u32 irq : 1;
        u32 : 1;
        u32 timer : 21; 
    };
    u32 value;
} SIO_STAT;

struct input_device_base
{
    enum input_device_type type;
    void (*input_get_data)(struct input_device_base *device);
    u8 data[6]; /* maximum number of input bytes generated by a device */
    //enum sio_state state;
    //u32 sequence_at; /* index in the communication sequence */
};

struct sio_context
{
    //union digital_pad_switches buttons;
    //u32 command_index;
    u32 sequence_len;
    u32 sequence_index;
    enum sio_state state;
    struct input_device_base *devices[2];

    SIO_STAT stat;
    u16 mode;
    u16 control; 
    u16 baud_reload; // not sure if this needs a default value
    u8 bytes_left_until_irq;
    u8 tx_buffer; // TODO: remove
    u8 tx_buffer_full;
    u8 rx_buffer;
    u8 rx_buffer_full;
    u64 cycles_at_baud_store;
};

extern struct sio_context g_sio;

//void sio_connect_input_device(struct input_device_base *device, enum input_device_type device_type, input_data_callback callback, u32 port);

u16 sio_read(u32 offset);
void sio_store(u32 offset, u16 value);


#endif /* PAD_H */
